<!-- Component: Footer -->
<footer class="[ mambo-footer ]" data-color="cream-on-maroon-primary">
  <div class="[ container container-default ]">
    <ul class="[ list ][ links ]">
      {% for link in settings.secondaryNavLinks %}
        {% if link.enabled == true %}
          <li>
            <a aria-label="{{ link.title }}" class="[ mambo-anchor ]" href="{{ link.url }}">
              {{ link.title | safe }}
            </a>
          </li>
        {% endif %}
      {% endfor %}
    </ul>
    <ul class="[ list ][ social ]">
      {% for link in settings.socialMediaLinks %}
        <li>
          <a aria-label="{{ link.title }}" class="[ mambo-anchor ]"
						href="{{ link.url }}" rel="noopener nofollow" target="_blank">
            {{ link.icon | safe }}
          </a>
        </li>
      {% endfor %}
    </ul>
    <p class="[ copyright ]">
      {{ settings.copyright | safe }}
    </p>
  </div>
</footer>
{% if page.url == "/" %}
  <script>
    // Parallax Roots
    var scene = document.getElementById('scene');
    var parallaxInstance = new Parallax(scene);
  </script>
{% endif %}
<script>
  // Houdini: Committee Jump to
  var disclosure = new Houdini('[data-houdini-committeeMenu]');
  document.addEventListener('click', function (event) {

    // Ignore clicks in the content element or on the button
    if (event.target.closest('#committeeMenu') || event.target.closest('[data-houdini-toggle="committeeMenu"]')) 
      return;
    
    // Selector string
    disclosure.collapse('#committeeMenu');
  })

  // Houdini: Events Jump to
  var disclosure = new Houdini('[data-houdini-eventsMenu]');
  document.addEventListener('click', function (event) {

    // Ignore clicks in the content element or on the button
    if (event.target.closest('#eventsMenu') || event.target.closest('[data-houdini-toggle="eventsMenu"]')) 
      return;
    
    // Selector string
    disclosure.collapse('#event');
  })

  // Houdini: Mobile Menu
  var disclosure = new Houdini('[data-houdini-menu]');

  // TabIndex Script
  (function ($) {

    jQuery.extend(jQuery.expr[':'], {
      focusable: function (el, index, selector) {
        var $element = $(el);
        return $element.is(':input:enabled, a[href], area[href], object, [tabindex]') && !$element.is(':hidden');
      }
    });

    function focusOnElement($element) {
      if (!$element.length) {
        return;
      }
      if (!$element.is(':focusable')) {
        // add tabindex to make focusable and remove again
        $element
          .attr('tabindex', -1)
          .on('blur focusout', function () {
            $(this).removeAttr('tabindex');
          });
      }
      $element.focus();
    }

    $(document).ready(function () {
      // if there is a '#' in the URL (someone linking directly to a page with an anchor)
      if (document.location.hash) {
        focusOnElement($(document.location.hash));
      }

      // if the hash has been changed (activation of an in-page link)
      $(window).bind('hashchange', function () {
        var hash = "#" + window
          .location
          .hash
          .replace(/^#/, '');
        focusOnElement($(hash));
      });
    });

  })(jQuery);
</script>
